"""Tests for SKiDL generator functions"""
import unittest
from unittest.mock import Mock
from generator import generate
from generator import generate_ftdi_header

class TestGenerator(unittest.TestCase):
    """Tests for SKiDL generator functions"""
    def test_esp12e_basic(self):
        """Test basic generation case with ESP-12E"""
        wizard = Mock()
        wizard.field.return_value = False
        self.assertEqual(
            generate({'mcu':'ESP-12E',
                      'mcu_footprint':'RF_Module:ESP-12E',
                      'mcurail':'+VBatt',
                      'powersource':'No battery'}, wizard),
            '''
#Generated by Swimibowi - SKiDL Microcontroller Board Wizard
"""Creates Kicad netlist file for a microcontroller board"""
from skidl import Bus, Part, Net, generate_netlist

U1 = Part('RF_Module', 'ESP-12E', footprint='RF_Module:ESP-12E')

NETS = {}
NETS['+VBatt'] = Net('+VBatt')
NETS['+VBus'] = Net('+VBus')
NETS['+3V'] = Net('+3V')
NETS['+3V3'] = Net('+3V3')
NETS['+5V'] = Net('+5V')
NETS['GND'] = Net('GND')

U1['VCC'] += NETS['+VBatt']
U1['GND'] += NETS['GND']
U1['EN'] += NETS['+VBatt']
U1['GPIO15'] += NETS['GND']

generate_netlist()
'''
        )
    def test_esp12e_all_options(self):
        """Test ESP-12E with reset line, reset button and 18b20"""
        self.maxDiff = 10000
        wizard = Mock()
        wizard.field.return_value = True
        self.assertEqual(
            generate({'mcu':'ESP-12E',
                      'mcu_footprint':'RF_Module:ESP-12E',
                      'mcurail':'+VBatt',
                      'powersource':'No battery'}, wizard),
            '''
#Generated by Swimibowi - SKiDL Microcontroller Board Wizard
"""Creates Kicad netlist file for a microcontroller board"""
from skidl import Bus, Part, Net, generate_netlist

U1 = Part('RF_Module', 'ESP-12E', footprint='RF_Module:ESP-12E')

NETS = {}
NETS['+VBatt'] = Net('+VBatt')
NETS['+VBus'] = Net('+VBus')
NETS['+3V'] = Net('+3V')
NETS['+3V3'] = Net('+3V3')
NETS['+5V'] = Net('+5V')
NETS['GND'] = Net('GND')

U1['VCC'] += NETS['+VBatt']
U1['GND'] += NETS['GND']
U1['EN'] += NETS['+VBatt']
U1['GPIO15'] += NETS['GND']

NETS['RST'] = Net('RST')
U1['RST'] += NETS['RST']
U1['GPIO16'] += NETS['RST']

SW1 = Part('Switch', 'SW_Push', footprint="Button_Switch_SMD:SW_SPST_B3U-1000P")
SW1[1] += NETS['RST']
SW1[2] += NETS['GND']

SW2 = Part('Switch', 'SW_Push', footprint="Button_Switch_SMD:SW_SPST_B3U-1000P")
SW2[1] += U1['GPIO15']
SW2[2] += NETS['GND']

NETS['VDD'] = Net('VDD')
NETS['VDD'] += NETS['+VBatt']
NETS['DQ'] = Net('DQ')

U2 = Part('Sensor_Temperature', 'DS18B20', footprint="Package_TO_SOT_THT:TO-92_Inline")
U2['VDD'] += NETS['VDD']
U2['GND'] += NETS['GND']
U2['DQ'] += NETS['DQ']
U1['GPIO2'] += NETS['DQ']

NETS['VDD'] = Net('VDD')
NETS['VDD'] += NETS['+VBatt']
NETS['DQ'] = Net('DQ')

U3 = Part('Sensor_Temperature', 'DS18B20U', footprint="Package_SO:MSOP-8_3x3mm_P0.65mm")
U3['VDD'] += NETS['VDD']
U3['GND'] += NETS['GND']
U3['DQ'] += NETS['DQ']
U1['GPIO2'] += NETS['DQ']

FTDI_HEADER = Part('Connector', 'Conn_01x06_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x06_P2.54mm_Vertical')
FTDI_HEADER[1] += NETS['GND']
FTDI_HEADER[2] += NC
FTDI_HEADER[3] += NETS['VDD']
FTDI_HEADER[4] += U1['TX']
FTDI_HEADER[5] += U1['RX']
FTDI_HEADER[6] += NC

generate_netlist()
'''
        )

    def test_ftdi_header(self):
        """Test FTDI header generation"""
        self.assertEqual(generate_ftdi_header(),
        '''
FTDI_HEADER = Part('Connector', 'Conn_01x06_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x06_P2.54mm_Vertical')
FTDI_HEADER[1] += NETS['GND']
FTDI_HEADER[2] += NC
FTDI_HEADER[3] += NETS['VDD']
FTDI_HEADER[4] += U1['TX']
FTDI_HEADER[5] += U1['RX']
FTDI_HEADER[6] += NC
''')

if __name__ == '__main__':
    unittest.main()
