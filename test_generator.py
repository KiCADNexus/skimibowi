"""Tests for SKiDL generator functions"""
import sys
from io import StringIO
import unittest
from generator import generate
from generator import generate_battery_management
from generator import generate_ftdi_header
from generator import generate_ftdi230
from generator import generate_esp_uart_reset

class TestGenerator(unittest.TestCase):
    """Tests for SKiDL generator functions"""
    def test_esp12e_basic(self):
        """Test basic generation case with ESP-12E"""
        self.maxDiff = 10000
        self.assertEqual(
            generate({'mcu':'ESP-12E',
                      'mcu_footprint':'RF_Module:ESP-12E',
                      'mcurail':'+VBatt',
                      'powersource':'No battery',
                      'regulator_data': None,
                      'resistor_footprint': 'Resistor_SMD:R_1206_3216Metric',
                      'led_footprint': 'LED_1206_3216Metric',
                      'usb_connector_footprint':{'part': 'USB_B_Micro', 'footprint': 'USB_Micro-B_Amphenol_10103594-0001LF_Horizontal'},
                      'onewire_connector_footprint': 'Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical'}),
            '''#Generated by Swimibowi - SKiDL Microcontroller Board Wizard
"""Creates Kicad netlist file for a microcontroller board"""
from skidl import Bus, Part, Net, generate_netlist

U1 = Part('RF_Module', 'ESP-12E', footprint='RF_Module:ESP-12E')

U1['VCC'] += Net.fetch('+VBatt')
U1['GND'] += Net.fetch('GND')
U1R1 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
U1R2 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('+VBatt') & U1R1 & U1['EN']
Net.fetch('GND') & U1R2 & U1['GPIO15']

U3R1 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
U3R1[1] += Net.fetch('+VBatt')
U3R1[2] += Net.fetch('DQ')

ONEWIRECONN = Part('Connector', 'Conn_01x03_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical')
ONEWIRECONN[1] += Net.fetch('+VBatt')
ONEWIRECONN[2] += Net.fetch('DQ')
ONEWIRECONN[3] += Net.fetch('GND')

USBMICRO = Part('Connector', 'USB_B_Micro', footprint='USB_Micro-B_Amphenol_10103594-0001LF_Horizontal')
USBMICRO['VBUS'] += Net.fetch('+VBus')
USBMICRO['GND'] += Net.fetch('GND')

Net.fetch('+VBatt')

generate_netlist()
'''
        )
    def test_esp12e_all_options(self):
        """Test ESP-12E with reset line, reset button and 18b20"""
        self.maxDiff = 10000
        self.assertEqual(
            generate({'mcu':'ESP-12E',
                      'mcu_footprint':'RF_Module:ESP-12E',
                      'mcurail':'+VBatt',
                      'FTDI header': True,
                      'reset': True,
                      'fuse': 'Schurter 0031.8201 5x20mm holder',
                      'fuse_footprint': 'Fuseholder_Cylinder-5x20mm_Schurter_0031_8201_Horizontal_Open',
                      'switch': True,
                      'ina219': True,
                      'DS18B20': True,
                      'DS18B20U': True,
                      'Reset button': True,
                      'Flash button': True,
                      'led': True,
                      'powersource':'No battery',
                      'regulator_data': None,
                      'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                      'led_footprint': 'LED_1206_3216Metric',
                      'usb_connector_footprint':{'part': 'USB_B_Micro', 'footprint': 'USB_Micro-B_Amphenol_10103594-0001LF_Horizontal'},
                      'onewire_connector_footprint': 'Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical'}),
            '''#Generated by Swimibowi - SKiDL Microcontroller Board Wizard
"""Creates Kicad netlist file for a microcontroller board"""
from skidl import Bus, Part, Net, generate_netlist

U1 = Part('RF_Module', 'ESP-12E', footprint='RF_Module:ESP-12E')

U1['VCC'] += Net.fetch('+VBatt')
U1['GND'] += Net.fetch('GND')
U1R1 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
U1R2 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('+VBatt') & U1R1 & U1['EN']
Net.fetch('GND') & U1R2 & U1['GPIO15']

FUSE = Part('Device', 'Fuse', footprint='Fuseholder_Cylinder-5x20mm_Schurter_0031_8201_Horizontal_Open')

SWITCH = Part('Switch', 'SW_DPDT_x2', footprint='Button_Switch_THT:SW_CuK_JS202011CQN_DPDT_Straight')

U1['RST'] += Net.fetch('RST')
U1['GPIO16'] += Net.fetch('RST')

SW1 = Part('Switch', 'SW_Push', footprint="Button_Switch_SMD:SW_SPST_B3U-1000P")
SW1[1] += Net.fetch('RST')
SW1[2] += Net.fetch('GND')

SW2 = Part('Switch', 'SW_Push', footprint="Button_Switch_SMD:SW_SPST_B3U-1000P")
SW2[1] += U1['GPIO0']
SW2[2] += Net.fetch('GND')

LED = Part('Device', 'LED', footprint='LED_1206_3216Metric')
LED_R = Part('Device', 'R', value='1k', footprint='Resistor_SMD:R_1206_3216Metric')
U1['GPIO0'] & LED_R & LED & Net.fetch('+VBatt')

U3R1 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
U3R1[1] += Net.fetch('+VBatt')
U3R1[2] += Net.fetch('DQ')

U2 = Part('Sensor_Temperature', 'DS18B20', footprint="Package_TO_SOT_THT:TO-92_Inline")
U2['VDD'] += Net.fetch('+VBatt')
U2['GND'] += Net.fetch('GND')
U2['DQ'] += Net.fetch('DQ')
U1['GPIO2'] += Net.fetch('DQ')

U3 = Part('Sensor_Temperature', 'DS18B20U', footprint="Package_SO:MSOP-8_3x3mm_P0.65mm")
U3['VDD'] += Net.fetch('+VBatt')
U3['GND'] += Net.fetch('GND')
U3['DQ'] += Net.fetch('DQ')
U1['GPIO2'] += Net.fetch('DQ')

ONEWIRECONN = Part('Connector', 'Conn_01x03_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical')
ONEWIRECONN[1] += Net.fetch('+VBatt')
ONEWIRECONN[2] += Net.fetch('DQ')
ONEWIRECONN[3] += Net.fetch('GND')

INA219 = Part('Analog_ADC', 'INA219AxD', footprint='Package_SO:SOIC-8_3.9x4.9mm_P1.27mm')
INA219['VS'] += Net.fetch('+VBatt')
INA219['GND'] += Net.fetch('GND')

#Setup I2C bus
INA219['SDA'] += U1['GPIO4']
INA219['SCL'] += U1['GPIO5']
SDA_PULLUP = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
SCL_PULLUP = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
U1['GPIO4'] & SDA_PULLUP & Net.fetch('+VBatt')
U1['GPIO5'] & SCL_PULLUP & Net.fetch('+VBatt')

#Setup shunt resistor that is used to measure current from voltage drop
INA219_R_SHUNT = Part('Device', 'R', value='0.1', footprint='Resistor_SMD:R_1206_3216Metric')
INA219['IN+'] += INA219_R_SHUNT[1]
INA219['IN-'] += INA219_R_SHUNT[2]

#Set I2C address
INA219_R_A0_PULLDOWN = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
INA219_R_A1_PULLDOWN = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('GND') & INA219_R_A0_PULLDOWN & INA219['A0']
Net.fetch('GND') & INA219_R_A1_PULLDOWN & INA219['A1']

FTDI_HEADER = Part('Connector', 'Conn_01x06_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x06_P2.54mm_Vertical')
FTDI_HEADER[1] += Net.fetch('GND')
FTDI_HEADER[2] += NC
FTDI_HEADER[3] += Net.fetch('+VBatt')
FTDI_HEADER[4] += Net.fetch('rx')
FTDI_HEADER[5] += Net.fetch('tx')
FTDI_HEADER[6] += NC

USBMICRO = Part('Connector', 'USB_B_Micro', footprint='USB_Micro-B_Amphenol_10103594-0001LF_Horizontal')
USBMICRO['VBUS'] += Net.fetch('+VBus')
USBMICRO['GND'] += Net.fetch('GND')

Net.fetch('+VBatt') & INA219_R_SHUNT & SWITCH[1,2] & FUSE

generate_netlist()
'''
        )

    def test_ftdi_header(self):
        """Test FTDI header generation"""
        self.maxDiff = 10000
        self.assertEqual(
            generate_ftdi_header({'mcurail':'VDD'}),
            '''
FTDI_HEADER = Part('Connector', 'Conn_01x06_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x06_P2.54mm_Vertical')
FTDI_HEADER[1] += Net.fetch('GND')
FTDI_HEADER[2] += NC
FTDI_HEADER[3] += Net.fetch('VDD')
FTDI_HEADER[4] += Net.fetch('rx')
FTDI_HEADER[5] += Net.fetch('tx')
FTDI_HEADER[6] += NC
'''
            )

    def test_battery_management(self):
        """Test FTDI header generation"""
        self.maxDiff = 3000
        self.assertEqual(
            generate_battery_management(
                {'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                 'capacitor_footprint': 'Capacitor_SMD:C_1206_3216Metric',
                 'led_footprint': 'LED_SMD:LED_1206_3216Metric',
                 'regulator_data': None}),
            '''
BATTERYMANAGER = Part('Battery_Management', 'MCP73871-2AA', footprint='Package_DFN_QFN:QFN-20-1EP_4x4mm_P0.5mm_EP2.5x2.5mm')
BATTERYMANAGER['IN'] += Net.fetch('+VBus')
BATTERYMANAGER['SEL'] += Net.fetch('+VBus')
BATTERYMANAGER['PROG2'] += Net.fetch('+VBus')
BATTERYMANAGER['TE'] += Net.fetch('+VBus')
BATTERYMANAGER['CE'] += Net.fetch('+VBus')

BATTERYMANAGER['VSS'] += Net.fetch('GND')

BATTERYMANAGER['OUT'] += Net.fetch('+VBatt')

BATTERYMANAGER['VBAT'] += Net.fetch('+VLipo')
BATTERYMANAGER['Vbat_SENSE'] += Net.fetch('+VLipo')

RPROG1 = Part('Device', 'R', value='2k', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('GND') & RPROG1 & BATTERYMANAGER['PROG1']
RPROG2 = Part('Device', 'R', value='100k', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('GND') & RPROG2 & BATTERYMANAGER['PROG3']

BM_LED = Part('Device', 'LED', footprint='LED_SMD:LED_1206_3216Metric')
BM_LED_R = Part('Device', 'R', value='1k', footprint='Resistor_SMD:R_1206_3216Metric')
BATTERYMANAGER['STAT1'] & BM_LED_R & BM_LED & Net.fetch('+VBus')

BM_LED2 = Part('Device', 'LED', footprint='LED_SMD:LED_1206_3216Metric')
BM_LED_R2 = Part('Device', 'R', value='1k', footprint='Resistor_SMD:R_1206_3216Metric')
BATTERYMANAGER['STAT2'] & BM_LED_R2 & BM_LED2 & Net.fetch('+VBus')

BM_C = Part('Device', 'C', value='10uF', footprint='Capacitor_SMD:C_1206_3216Metric')
Net.fetch('+VLipo') & BM_C & Net.fetch('GND')

BM_VPCC_R1 = Part('Device', 'R', value='100k', footprint='Resistor_SMD:R_1206_3216Metric')
BM_VPCC_R2 = Part('Device', 'R', value='270k', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('GND') & BM_VPCC_R1 & BM_VPCC_R2 & Net.fetch('+VBus')
BATTERYMANAGER['VPCC'] += BM_VPCC_R2[1]

BM_THERM_R = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
BATTERYMANAGER['THERM'] & BM_THERM_R & Net.fetch('GND')
'''
            )

    def test_ftdi230(self):
        """Test generation of FTDI230"""
        self.maxDiff = 10000
        self.assertEqual(
            generate_ftdi230({'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                              'mcurail':'+VBus',
                              'mcu':'ESP-12E'}),
            '''
FTDI230 = Part('Interface_USB', 'FT231XS', footprint="Package_SO:SSOP-20_3.9x8.7mm_P0.635mm")
FTDI230['VCC'] += Net.fetch('+VBus')
FTDI230['GND'] += Net.fetch('GND')
FTDI230['TXD'] += U1['RX']
FTDI230['RXD'] += U1['TX']
FTDI230['USBDM'] += USBMICRO['D-']
FTDI230['USBDP'] += USBMICRO['D+']

Q1 = Part('Transistor_BJT', 'PZT2222A', footprint='Package_TO_SOT_SMD:SOT-223')
Q2 = Part('Transistor_BJT', 'PZT2222A', footprint='Package_TO_SOT_SMD:SOT-223')
QR1 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
QR2 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
Q1['B'] += QR1[1]
QR1[2] += Net.fetch('DTR')
Q2['B'] += QR2[1]
QR2[2] += Net.fetch('RTS')
Q1['E'] += U1['GPIO0']
Q2['E'] += U1['RST']
Q1['C'] += Q2['C']
Q2['C'] += Net.fetch('DTR')
Q1['C'] += Net.fetch('RTS')
'''
            )

    def test_ftdi230(self):
        """Test generation of ESP uart reset circuitry"""
        self.maxDiff = 10000
        self.assertEqual(
            generate_esp_uart_reset({'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                              'mcurail':'+VBus',
                              'mcu':'ESP-12E'}),
            '''
Q1 = Part('Transistor_BJT', 'PZT2222A', footprint='Package_TO_SOT_SMD:SOT-223')
Q2 = Part('Transistor_BJT', 'PZT2222A', footprint='Package_TO_SOT_SMD:SOT-223')
QR1 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
QR2 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
Q1['B'] += QR1[1]
QR1[2] += Net.fetch('DTR')
Q2['B'] += QR2[1]
QR2[2] += Net.fetch('RTS')
Q1['E'] += U1['GPIO0']
Q2['E'] += U1['RST']
Q1['C'] += Q2['C']
Q2['C'] += Net.fetch('DTR')
Q1['C'] += Net.fetch('RTS')
'''
            )

    def test_esp12e_all_options_execution(self):
        """Test execution of generated skidl code with all options true"""

        codeOut = StringIO()
        codeErr = StringIO()
        sys.stdout = codeOut
        sys.stderr = codeErr

        exec(generate({'mcu':'ESP-12E',
                       'mcu_footprint':'RF_Module:ESP-12E',
                       'mcurail':'+3V3',
                       'powersource': '2xAAA - Keystone 2468',
                       'powersource_footprint':'BatteryHolder_Keystone_2468_2xAAA',
                       'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                       'led_footprint': 'LED_1206_3216Metric',
                       'ina219': True,
                       'reset': True,
                       'fuse': 'Schurter 0031.8201 5x20mm holder',
                       'fuse_footprint': 'Fuseholder_Cylinder-5x20mm_Schurter_0031_8201_Horizontal_Open',
                       'switch': True,
                       'ina219': True,
                       'DS18B20': True,
                       'DS18B20U': True,
                       'Reset button': True,
                       'Flash button': True,
                       'led': True,
                       'regulator_data': None,
                       'usb_connector_footprint':{'part': 'USB_B_Micro', 'footprint': 'USB_Micro-B_Amphenol_10103594-0001LF_Horizontal'},
                       'onewire_connector_footprint': 'Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical'}))

        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__
        self.assertTrue(codeErr.getvalue().endswith('No errors or warnings found during netlist generation.\n\n'))
        self.assertEqual('', codeOut.getvalue())

        codeOut.close()
        codeErr.close()

    def test_generate_battery(self):
        """Test ESP-12E with Battery"""
        self.maxDiff = 10000
        self.assertEqual(
            generate({'mcu':'ESP-12E',
                      'mcu_footprint':'RF_Module:ESP-12E',
                      'mcurail':'+VBatt',
                      'regulator_data': None,
                      'powersource': '2xAAA - Keystone 2468',
                      'powersource_footprint':'BatteryHolder_Keystone_2468_2xAAA',
                      'resistor_footprint':'Resistor_SMD:R_1206_3216Metric',
                      'led_footprint': 'LED_1206_3216Metric',
                      'usb_connector_footprint':{'part': 'USB_B_Micro', 'footprint': 'USB_Micro-B_Amphenol_10103594-0001LF_Horizontal'},
                      'onewire_connector_footprint': 'Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical'}),
            '''#Generated by Swimibowi - SKiDL Microcontroller Board Wizard
"""Creates Kicad netlist file for a microcontroller board"""
from skidl import Bus, Part, Net, generate_netlist

U1 = Part('RF_Module', 'ESP-12E', footprint='RF_Module:ESP-12E')

U1['VCC'] += Net.fetch('+VBatt')
U1['GND'] += Net.fetch('GND')
U1R1 = Part('Device', 'R', value='10k', footprint='Resistor_SMD:R_1206_3216Metric')
U1R2 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
Net.fetch('+VBatt') & U1R1 & U1['EN']
Net.fetch('GND') & U1R2 & U1['GPIO15']

BATTERY = Part('Device', 'Battery', footprint='BatteryHolder_Keystone_2468_2xAAA')
BATTERY['+'] += Net.fetch('+VBatt')
BATTERY['-'] += Net.fetch('GND')

U3R1 = Part('Device', 'R', value='4k7', footprint='Resistor_SMD:R_1206_3216Metric')
U3R1[1] += Net.fetch('+VBatt')
U3R1[2] += Net.fetch('DQ')

ONEWIRECONN = Part('Connector', 'Conn_01x03_Female', footprint='Connector_PinHeader_2.54mm:PinHeader_1x03_P2.54mm_Vertical')
ONEWIRECONN[1] += Net.fetch('+VBatt')
ONEWIRECONN[2] += Net.fetch('DQ')
ONEWIRECONN[3] += Net.fetch('GND')

USBMICRO = Part('Connector', 'USB_B_Micro', footprint='USB_Micro-B_Amphenol_10103594-0001LF_Horizontal')
USBMICRO['VBUS'] += Net.fetch('+VBus')
USBMICRO['GND'] += Net.fetch('GND')

Net.fetch('+VBatt') & BATTERY

generate_netlist()
''')



if __name__ == '__main__':
    unittest.main()
